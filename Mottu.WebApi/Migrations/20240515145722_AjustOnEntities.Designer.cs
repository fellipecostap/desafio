// <auto-generated />
using System;
using Desafio.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Desafio.WebApi.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240515145722_AjustOnEntities")]
    partial class AjustOnEntities
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Desafio.Domain.Entities.ClientEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool?>("ClientExcluded")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ClientUserEntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("Created")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("LastModified")
                        .HasColumnType("text");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("ProfilePhoto")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ClientUserEntityId");

                    b.ToTable("ClientEntity");
                });

            modelBuilder.Entity("Desafio.Domain.Entities.MotorcycleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<string>("Created")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Identifier")
                        .HasColumnType("text");

                    b.Property<string>("LastModified")
                        .HasColumnType("text");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Model")
                        .HasColumnType("text");

                    b.Property<string>("Plate")
                        .HasColumnType("text");

                    b.Property<string>("Year")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("MotorcycleEntity");
                });

            modelBuilder.Entity("Desafio.Domain.Entities.PlanEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Created")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<double>("Fine")
                        .HasColumnType("double precision");

                    b.Property<string>("LastModified")
                        .HasColumnType("text");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<int?>("Plan")
                        .HasColumnType("integer");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("PlanEntity");
                });

            modelBuilder.Entity("Desafio.Domain.Entities.PreRegistrationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Created")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("LastModified")
                        .HasColumnType("text");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("NickName")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<bool>("TagValidation")
                        .HasColumnType("boolean");

                    b.Property<string>("TokenValidation")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PreRegistrationEntity");
                });

            modelBuilder.Entity("Desafio.Domain.Entities.PreUpdateEmailEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Created")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("LastModified")
                        .HasColumnType("text");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("NewEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OldEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TokenValidation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UserEntityId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserEntityId");

                    b.ToTable("PreUpdateEmailEntity");
                });

            modelBuilder.Entity("Desafio.Domain.Entities.RefreshTokenEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Created")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("LastModified")
                        .HasColumnType("text");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<Guid>("UserEntityId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserEntityId");

                    b.ToTable("RefreshTokenEntity");
                });

            modelBuilder.Entity("Desafio.Domain.Entities.ServiceEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double?>("Amount")
                        .HasColumnType("double precision");

                    b.Property<Guid?>("ClientEntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("Created")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("FinalDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double?>("Fine")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("InitialDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModified")
                        .HasColumnType("text");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<Guid?>("MotorcycleEntityId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PlanId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("PrevisionFinalDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double?>("Price")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("ClientEntityId");

                    b.HasIndex("MotorcycleEntityId");

                    b.HasIndex("PlanId");

                    b.ToTable("ServiceEntity");
                });

            modelBuilder.Entity("Desafio.Domain.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CNHPhoto")
                        .HasColumnType("text");

                    b.Property<int>("CNHType")
                        .HasColumnType("integer");

                    b.Property<string>("Created")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("LastModified")
                        .HasColumnType("text");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("UserCNH")
                        .HasColumnType("text");

                    b.Property<string>("UserCnpj")
                        .HasColumnType("text");

                    b.Property<bool?>("UserExcluded")
                        .HasColumnType("boolean");

                    b.Property<string>("UserMail")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.Property<Guid?>("UserTypeEntityId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserTypeEntityId");

                    b.ToTable("UserEntity");
                });

            modelBuilder.Entity("Desafio.Domain.Entities.UserTypeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Created")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("LastModified")
                        .HasColumnType("text");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("UserTypeName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("UserTypeEntity");
                });

            modelBuilder.Entity("Desafio.Domain.Entities.ClientEntity", b =>
                {
                    b.HasOne("Desafio.Domain.Entities.UserEntity", "ClientUserEntity")
                        .WithMany()
                        .HasForeignKey("ClientUserEntityId");

                    b.Navigation("ClientUserEntity");
                });

            modelBuilder.Entity("Desafio.Domain.Entities.MotorcycleEntity", b =>
                {
                    b.HasOne("Desafio.Domain.Entities.ClientEntity", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Desafio.Domain.Entities.PreUpdateEmailEntity", b =>
                {
                    b.HasOne("Desafio.Domain.Entities.UserEntity", "UserEntity")
                        .WithMany()
                        .HasForeignKey("UserEntityId");

                    b.Navigation("UserEntity");
                });

            modelBuilder.Entity("Desafio.Domain.Entities.RefreshTokenEntity", b =>
                {
                    b.HasOne("Desafio.Domain.Entities.UserEntity", "UserEntity")
                        .WithMany()
                        .HasForeignKey("UserEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserEntity");
                });

            modelBuilder.Entity("Desafio.Domain.Entities.ServiceEntity", b =>
                {
                    b.HasOne("Desafio.Domain.Entities.ClientEntity", "ClientEntity")
                        .WithMany("ServicesList")
                        .HasForeignKey("ClientEntityId");

                    b.HasOne("Desafio.Domain.Entities.MotorcycleEntity", null)
                        .WithMany("Services")
                        .HasForeignKey("MotorcycleEntityId");

                    b.HasOne("Desafio.Domain.Entities.PlanEntity", "Plan")
                        .WithMany()
                        .HasForeignKey("PlanId");

                    b.Navigation("ClientEntity");

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("Desafio.Domain.Entities.UserEntity", b =>
                {
                    b.HasOne("Desafio.Domain.Entities.UserTypeEntity", "UserTypeEntity")
                        .WithMany()
                        .HasForeignKey("UserTypeEntityId");

                    b.Navigation("UserTypeEntity");
                });

            modelBuilder.Entity("Desafio.Domain.Entities.ClientEntity", b =>
                {
                    b.Navigation("ServicesList");
                });

            modelBuilder.Entity("Desafio.Domain.Entities.MotorcycleEntity", b =>
                {
                    b.Navigation("Services");
                });
#pragma warning restore 612, 618
        }
    }
}
